name: CI Go Test & Docker Build Validation

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Vari√°veis de ambiente
env:
  GO_VERSION: '1.25'
  DOCKER_IMAGE_NAME: ${{ github.repository }}
  GO_PROJECT_PATH: ./app

jobs:
  validate:
    name: Test Go Code and Validate Docker Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # 1. Configurar Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }} 

      # 2. Otimiza√ß√£o de Cache de M√≥dulos
      # O cache √© configurado na raiz, mas a chave depende dos arquivos em 'app/'
      - name: Go Mod Cache
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          # A chave agora referencia explicitamente os arquivos em 'app/'
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('app/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Download Go dependencies
        run: go mod download
        working-directory: ${{ env.GO_PROJECT_PATH }}

      # 3. üéØ Executar Testes de Unidade
      # Valida a l√≥gica da aplica√ß√£o. Se falhar, o build do Docker n√£o √© executado.
      - name: Run Unit Tests
        run: go test ./... -v
        working-directory: ${{ env.GO_PROJECT_PATH }}

      # 4. üê≥ Validar Compila√ß√£o e Build da Imagem Docker
      # O par√¢metro 'push: false' garante que o Dockerfile seja executado
      # e a imagem constru√≠da localmente, confirmando que a compila√ß√£o Go (no Docker)
      # est√° OK e o Dockerfile n√£o tem erros, sem iniciar o container.
      - name: Validate Docker Multi-Stage Build
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.GO_PROJECT_PATH }}/Dockerfile 
          tags: ${{ env.DOCKER_IMAGE_NAME }}:test-build-only
          push: false 
          
          
      - name: Cleanup Docker Images
        if: always()
        run: docker rmi ${{ env.DOCKER_IMAGE_NAME }}:test-build-only || true
        # Limpa a imagem local criada para evitar consumo de espa√ßo na VM do runner.